// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ---- //
// iggx //
// ---- //

#define iggx_wrap_target 0
#define iggx_wrap 17
#define iggx_pio_version 0

static const uint16_t iggx_program_instructions[] = {
            //     .wrap_target
    0xf012, //  0: set    pins, 18        side 1     
    0xf007, //  1: set    pins, 7         side 1     
    0xf049, //  2: set    y, 9            side 1     
    0xf02d, //  3: set    x, 13           side 1     
    0xf00d, //  4: set    pins, 13        side 1     
    0xf007, //  5: set    pins, 7         side 1     
    0x1044, //  6: jmp    x--, 4          side 1     
    0x1083, //  7: jmp    y--, 3          side 1     
    0xf027, //  8: set    x, 7            side 1     
    0x6008, //  9: out    pins, 8         side 0     
    0x1049, // 10: jmp    x--, 9          side 1     
    0xf01d, // 11: set    pins, 29        side 1     
    0xf01f, // 12: set    pins, 31        side 1     
    0xf017, // 13: set    pins, 23        side 1     
    0xf007, // 14: set    pins, 7         side 1     
    0xf00f, // 15: set    pins, 15        side 1     
    0x1008, // 16: jmp    8               side 1     
    0xf00f, // 17: set    pins, 15        side 1     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program iggx_program = {
    .instructions = iggx_program_instructions,
    .length = 18,
    .origin = -1,
    .pio_version = 0,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config iggx_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + iggx_wrap_target, offset + iggx_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

#include "hardware/clocks.h"
static inline void iggx_program_init(PIO pio, uint sm, uint offset) {
    pio_sm_config c = iggx_program_get_default_config(offset);
    // Map the state machine's OUT pin group to one pin, namely the `pin`
    // parameter to this function.
    sm_config_set_out_pins(&c, 0, 8);
    sm_config_set_set_pins(&c, 14, 5);
    sm_config_set_sideset(&c, 1, false, false); // TODO: No idea what this needs
    sm_config_set_sideset_pins(&c, 10);
    pio_gpio_init(pio, 10);
    // Set this pin's GPIO function (connect PIO to the pad)
    for (int i=0;i<9;i++){
        pio_gpio_init(pio, i);
    }
    for (int i=14;i<19;i++){
        pio_gpio_init(pio, i);
    }
    sm_config_set_out_shift(&c, true, true, 32); 
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
#define FPS 30
#define NUM_INSTR_IN_ANODE_LOOP 50
// Need 18 instructions to occur within 1 kathode tick
// Need FPS * 64 kathode ticks per second
// Need FPS * 64 * NUM_INSTR_ANODE_LOOP ticks per secod
#define INSTR_PER_SECOND (FPS * 64 * NUM_INSTR_IN_ANODE_LOOP)
    float div = (float) (clock_get_hz(clk_sys) / INSTR_PER_SECOND);
//div = 99999999;
    sm_config_set_clkdiv(&c, div*.5);
    // Set the pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, 0, 8, true);
    pio_sm_set_consecutive_pindirs(pio, sm, 10, 1, true);
    pio_sm_set_consecutive_pindirs(pio, sm, 14, 5, true);
    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}

#endif

